#!/usr/bin/env node
/* eslint-disable no-inner-declarations */

/**
 * Module dependencies.
 */
const logger = require('../logger');

(async () => {
	try {
		var app = require('../app');
		var config = require('../config/config.json');
		var debug = require('debug')('bbjet-recursos:server');
		var http = require('http');

		/**
		 * Get port from environment and store in Express.
		 */

		var port = normalizePort(config.PORT);
		app.set('port', port);

		/**
		 * Create HTTP server.
		 */

		var server = http.createServer(app);

		/**
		 * Listen on provided port, on all network interfaces.
		 */

		logger.info(`Iniciando servidor en el puerto ${port}`);
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening);

		/**
		 * Normalize a port into a number, string, or false.
		 */
		function normalizePort(val) {
			var port = parseInt(val, 10);

			if (isNaN(port)) {
				// named pipe
				return val;
			}

			if (port >= 0) {
				// port number
				return port;
			}

			return false;
		}

		/**
		 * Event listener for HTTP server "error" event.
		 */
		function onError(error) {
			if (error.syscall !== 'listen') {
				throw error;
			}

			var bind = typeof port === 'string' ? 'Pipe ' + port : 'Puerto ' + port;

			// handle specific listen errors with friendly messages
			switch (error.code) {
			case 'EACCES':
				logger.error(bind + 'requiere privilegios de administrador');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				logger.error(bind + 'ya se encuentra en uso');
				process.exit(1);
				break;
			default:
				throw error;
			}
		}

		/**
		 * Event listener for HTTP server "listening" event.
		 */
		function onListening() {
			var addr = server.address();
			var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
			debug('Listening on ' + bind);
		}
	} catch (e) {
		logger.error(`Error al iniciar el servidor ${e.message}`);
	}
})();
